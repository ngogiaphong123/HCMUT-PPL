
         threeSum : function array[2] of integer (nums : array[6] of integer) {
             n = length(nums);
             sort(nums);
             result : array [2] of integer= {};
             for (i = 0, i < n, i + 1) {
                 if ((i > 0) && (nums[i] == nums[i - 1])) {
                     continue;
                 }
                 target : integer = -nums[i];
                 left : integer = i + 1;
                 right : integer = n - 1;
                 while (left < right) {
                     if ((nums[left] + nums[right]) == target) {
                         result = append(result, {nums[i], nums[left], nums[right]});
                         left = left + 1;
                         while ((left < right) && (nums[left] == nums[left - 1])) {
                             left = left + 1;
                         }
                         right = right - 1;
                         while ((left < right) && (nums[right] == nums[right + 1])) {
                             right = right - 1;
                         }
                     } else {
                         if ((nums[left] + nums[right]) < target) {
                             left = left + 1;
                         } else {
                             right = right - 1;
                         }
                     }
                 }
             }
             return result;
         }
         main: function void () {
             nums = {-1, 0, 1, 2, -1, -4};
             printInt(threeSum(nums));
         }
         