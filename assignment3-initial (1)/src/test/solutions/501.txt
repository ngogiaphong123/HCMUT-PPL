Type mismatch in statement: IfStmt(BinExpr(==, Id(determinant), FloatLit(0.0)), BlockStmt([CallStmt(printString, StringLit(The matrix has no inverse.))]), BlockStmt([VarDecl(inverseMatrix, ArrayType([3, 3], FloatType)), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(0), IntegerLit(0)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(1)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(2)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(2), IntegerLit(1)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(2)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(0), IntegerLit(1)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(2)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(1)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(1)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(2)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(0), IntegerLit(2)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(1)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(2)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(2)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(1)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(1), IntegerLit(0)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(2)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(0)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(2)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(1), IntegerLit(1)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(2)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(2)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(0)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(1), IntegerLit(2)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(0), IntegerLit(2)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(2)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(2), IntegerLit(0)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(1)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(2), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(1)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(2), IntegerLit(1)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(2), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(0), IntegerLit(1)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(2), IntegerLit(1)]))), Id(determinant))), AssignStmt(ArrayCell(inverseMatrix, [IntegerLit(2), IntegerLit(2)]), BinExpr(/, BinExpr(-, BinExpr(*, ArrayCell(matrix, [IntegerLit(0), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(1), IntegerLit(1)])), BinExpr(*, ArrayCell(matrix, [IntegerLit(1), IntegerLit(0)]), ArrayCell(matrix, [IntegerLit(0), IntegerLit(1)]))), Id(determinant))), CallStmt(print, StringLit(The inverse matrix is:)), ForStmt(AssignStmt(Id(i), IntegerLit(0)), BinExpr(<, Id(i), IntegerLit(3)), BinExpr(+, Id(i), IntegerLit(1)), BlockStmt([ForStmt(AssignStmt(Id(j), IntegerLit(0)), BinExpr(<, Id(j), IntegerLit(3)), BinExpr(+, Id(j), IntegerLit(1)), BlockStmt([CallStmt(printFloat, ArrayCell(inverseMatrix, [Id(i), Id(j)]))]))]))]))